---
const items_width = Astro.props['items-width'] || '180px';
const duration = Astro.props['duration'] || '2s';

const {to = 'left', autoPlay = false, gap = '20px'} = Astro.props;
---

<custom-carousel 
    data-direction={`to-${to}`} 

    data-duration={duration} 
    
    data-autoPlay={autoPlay} 

    data-items-width={items_width} 

    data-items-gap={gap}
>

    <div class="Carousel">

        <div class="Carousel-controls">
            <button class="btn btn-play">
                <i class="bi bi-play-fill"></i>
            </button>

            <button class="btn btn-grid">
                <i class="bi bi-grid"></i>
            </button>
        </div>

        <div class="Carousel-content">

            <div class="Carousel-content-items">

                <div class="items">
                    
                    <slot />
                </div>

                <div class="items copy-items">
                    
                    <slot />
                </div>

            </div>

        </div>

    </div>

</custom-carousel>

<script>
    //@ts-nocheck

    class CustomCarousel extends HTMLElement {

        isRunning = false;

        grid = false;

        constructor(){
            super();

            this.direction = this.getAttribute('data-direction');
            this.duration = this.getAttribute('data-duration');

            this.content = this.querySelector('.Carousel-content');
            this.items = this.querySelector('.Carousel-content-items');

            //Number of items
            this.length = this.items.querySelector('.items').children.length;
            
            //Setting css variables
            this.items.style.setProperty('--items-length', this.length);
            this.items.style.setProperty('--items-animation-name', this.direction);

            this.items.style.setProperty('--items-justify', this.direction === 'to-left' ? 'start' : 'end');

            //Size and gap of items
            this.itemsGap = +this.getAttribute('data-items-gap').replaceAll(/[^0-9]/g, '');
            this.itemsWidth = +this.getAttribute('data-items-width').replaceAll(/[^0-9]/g, '');
            
            //controls
            this.playButton = this.querySelector('.Carousel-controls .btn-play');
            
            this.playButton.addEventListener('click', () => {
                
                if(this.isRunning){
                    this.pause();
                    
                }
                else {
                    this.play();
                    
                }
            });

            this.gridButton = this.querySelector('.Carousel-controls .btn-grid');

            this.gridButton.addEventListener('click', () => {

                this.grid = !this.grid;

                if(this.grid){
                    this.items.classList.add('grid');
                    this.items.classList.toggle(this.direction, false);
                    this.items.classList.toggle('pause', false);  

                    this.gridButton.querySelector('i').classList.replace('bi-grid', 'bi-grid-fill');
                }
                else {
                    this.items.classList.toggle('grid', false);
                    
                    if(this.autoPlay) this.play();
                    
                    this.gridButton.querySelector('i').classList.replace('bi-grid-fill', 'bi-grid');
                }

                this.playButton.disabled = this.grid;
            });


            //Auto play      
            this.autoPlay = this.hasAttribute('data-autoPlay');

            if(this.autoPlay) this.play();
        }

        pause(){

            const pause = (() => {

                const width = this.itemsWidth + this.itemsGap;

                const max_width = width * this.length;

                //Current transform
                const matrix = window.getComputedStyle(this.items).transform;

                const [scaleX, skewX, skewY, scaleY, translateX, translateY] = matrix.replaceAll(/[^0-9\.\- ]/g, '').split(' ').map(v => +v);
                
                //Calculate 
                const diff = Math.abs(translateX % width);

                const to = Math.sign(translateX) * (Math.abs(translateX) + (width - diff));

                return {
                    from: translateX,

                    to: Math.abs(width) >= max_width ? 0 : to,
                };
            })();

            this.items.style.setProperty('--pause-from', `${pause.from}px`);
            this.items.style.setProperty('--pause-to', `${pause.to}px`);
            
            this.items.classList.add('pause');

            this.isRunning = false;

            this.playButton.querySelector('i').classList.replace('bi-pause-fill', 'bi-play-fill');
        }
        
        play(){
            
            if(!this.items.classList.contains(this.direction)){

                this.items.classList.add(this.direction);
            }
            else {

                this.items.classList.toggle('pause', false);
            }
 
            this.items.style.setProperty('--pause-from', '');
            this.items.style.setProperty('--pause-to', '');

            this.isRunning = true;
            
            this.playButton.querySelector('i').classList.replace('bi-play-fill', 'bi-pause-fill');
        }
    }

    customElements.define('custom-carousel', CustomCarousel);
</script>

<style
    define:vars={{
        "items-width": items_width,
        "duration": duration,
        "gap": gap
    }}
>
    .Carousel-controls {
        display: flex;
        justify-content: flex-end;
        gap: 20px;
        padding: 20px 0;
    }
    .Carousel-controls .btn {
        border: none;
        font-size: 18px;
    }

    .Carousel-content {
        overflow: hidden;
    }

    .Carousel-content-items {
        display: flex;
        justify-content: var(--items-justify);
        gap: var(--gap);

        --items-full-width: calc( 
            (var(--items-width) + var(--gap)) * var(--items-length)
        );

        animation-name: var(--items-animation-name), fadein;
        animation-duration: calc(var(--duration) * var(--items-length)), 1.7s;
        animation-delay: 0s, 0s;
        animation-timing-function: linear, ease-in;
        animation-iteration-count: infinite, 1;
        animation-fill-mode: both, none;
        animation-play-state: running, running;
    }
    .Carousel-content-items .items {
        display: flex;
        margin: 0;
        padding: 0;
        gap: var(--gap);
    }
    .Carousel-content-items .items > :global(*) {
        width: var(--items-width);
        flex-shrink: 0;
    }

    /* Animaciones */
    @keyframes to-left {
        from {
            transform: translateX(0px);
        }
        to {
            transform: translateX( calc(-1 * var(--items-full-width)) );
        }
    }
    @keyframes to-right {
        from {
            transform: translateX(0px);
        }
        to {
            transform: translateX( var(--items-full-width) );
        }
    }

    .pause {
        
        animation-name: var(--items-animation-name), pause-animation;
        animation-duration: calc(var(--duration) * var(--items-length)), 0.5s;
        animation-delay: 0s, 0s;
        animation-timing-function: linear, linear;
        animation-iteration-count: infinite, 1;
        animation-fill-mode: both, both;
        animation-play-state: paused, running;
    }
    @keyframes pause-animation {
        from {
            transform: translateX(var(--pause-from, 0));
        }
        to {
            transform: translateX(var(--pause-to, 0));
        }
    }

    @keyframes fadein {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }

    @keyframes play-animation {
        from {
            transform: translateX(var(--pause-to, 0));
        }
        to {
            transform: translateX(var(--pause-from, 0));
        }
    }

    /* Grid */
    .grid {
        animation: none;
    }
    .grid .items {
        display: grid;
        grid-template-columns: repeat(auto-fill, var(--items-width));
        width: 100%;
        justify-content: space-between;
        gap: 50px 20px;
    }
    .grid .copy-items {
        display: none;
    }
</style>