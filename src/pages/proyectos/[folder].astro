---

import ProjectPreview from '@components/ProjectPreview.astro';
import RootLayout from '../../layouts/RootLayout.astro';
import {getProjects} from "@Projects/index.js";

export async function getStaticPaths() {
    
    const PROJECTS = await getProjects();
    
    return Object.values(PROJECTS).map((project) => {

        return {
            params: {
                folder: project.folder
            }
        };
    });
}

const {folder} = Astro.params;

const PROJECTS = await getProjects();



const {content} = PROJECTS[folder];

const {title, description, technologies, github, deploy} = content?.markdown?.frontmatter;

//Pagination
const projectsArray = Object.entries(PROJECTS);

const index = projectsArray.findIndex(([key]) => {

    return key === folder;
});

const [nextProject] = projectsArray[index + 1] || [];

const [previousProject] = projectsArray[index - 1] || [];
---


<RootLayout title={title}>


    <section class="Project container">

        <div class="Project-data">

            <h1 class="Project-title">{title}</h1>

            <div class="Project-technologies">
                {
                    technologies.map(name => {
    
                        return <span class="badge pill bg-primary">{name}</span>
                    })
                }
            </div>

            <article class="Project-description">

                <content.markdown.Content />

            </article>

        </div>

        <div>

            <ProjectPreview 

                video={content?.video}

                favicon={content.favicon?.src}

                title={title} 

                url={deploy} 

                github={github} 

                next={nextProject ? `/proyectos/${nextProject}` : null}

                previous={previousProject ? `/proyectos/${previousProject}` : null}
            />

        </div>
  

    </section>

</RootLayout>


<style>

    .Project {
        padding: 50px 0;
        display: flex;
        justify-content: space-between;
        
        gap: 20px;
    }

    .Project-data {
        max-width: 50%;
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .Project-data .Project-title {
        color: #f3b61f;
        font-size: clamp(30px, 10vw, 50px);
        text-transform: capitalize;
        text-wrap: balance;
    }

    .Project-data .Project-technologies {
        width: 100%;
        display: flex;
        justify-content: start;
        gap: 10px;
    }
    .Project-data .Project-technologies span {
        font-size: 15px;
    }

    .Project-data .Project-description {
        padding-top: 30px;
    }
    .Project-data .Project-description :global(p) {
        text-wrap: balance;
        width: 100%;
        max-width: 90ch;
        font-size: 18px;
        line-height: 30px;
    }
    .Project-data .Project-description :global(p strong),
    .Project-data .Project-description :global(p a) {
        color: #f3b61f;
        text-decoration: none;
    }

    .Project-data .Project-description :global(code) {
        background-color: #5d6573;
        padding: .2em .4em;
        border-radius: 6px;
        color: white;
        white-space: nowrap;
    }


    @media (max-width: 1199.98px){

        .Project {
            justify-content: center;
            flex-wrap: wrap-reverse;
        }
        .Project-data {
            max-width: initial;
        }
        .Project-title {
            text-align: center;
        }

        .Project-data .Project-technologies {
            justify-content: center;
        }
    }
    @media (max-width: 575.98px) {
        .Project {
            padding: 50px 10px;
        }
    }
    

</style>